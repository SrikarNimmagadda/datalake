# NOTE: Service name must match the repository name, but replace all '.' with '-' (this is a restriction of Cloudformation naming conventions)
# NOTE: See serverless docs at https://serverless.com/framework/docs/providers/aws/guide/quick-start/ for more information on serverless.yml
service: tb-app-datalake

custom:
  hen: ${env:HEN_NAME, self:custom.localDeploy.hen}
  coop: ${env:COOP, self:custom.localDeploy.coop}
  emrStackName: ${env:EMR_STACK_NAME, self:custom.localDeploy.emrStackName}
  localDeploy: # Settings used when deploying locally
    stage: local
    hen: local
    coop: local
    emrStackName: tb-emr-datalake-master
  dynamo:
    defaultCapacity: 1
    fileMetadata:
      name: ${self:service}.file-metadata.${self:provider.stage}
      readCapacity: ${env:DYNAMO_FILE_META_READ_CAP, self:custom.dynamo.defaultCapacity}
      writeCapacity: ${env:DYNAMO_FILE_META_WRITE_CAP, self:custom.dynamo.defaultCapacity}
    processMetadata:
      name: ${self:service}.process-metadata.${self:provider.stage}
      readCapacity: ${env:DYNAMO_PROCESS_META_READ_CAP, self:custom.dynamo.defaultCapacity}
      writeCapacity: ${env:DYNAMO_PROCESS_META_WRITE_CAP, self:custom.dynamo.defaultCapacity}
  buckets:
    code: ${self:service}-code-${self:custom.hen}-${self:provider.stage}
    landing: ${self:service}-landing-${self:custom.hen}-${self:provider.stage}
    rawCustomerPii: ${self:service}-raw-customer-pii-${self:custom.hen}-${self:provider.stage}
    rawHrPii: ${self:service}-raw-hr-pii-${self:custom.hen}-${self:provider.stage}
    rawRegular: ${self:service}-raw-regular-${self:custom.hen}-${self:provider.stage}
    discoveryCustomerPii: ${self:service}-discovery-cutomer-pii-${self:custom.hen}-${self:provider.stage}
    discoveryHrPii: ${self:service}-discovery-hr-pii-${self:custom.hen}-${self:provider.stage}
    discoveryRegular: ${self:service}-discovery-regular-${self:custom.hen}-${self:provider.stage}
    refinedCustomerPii: ${self:service}-refined-customer-pii-${self:custom.hen}-${self:provider.stage}
    refinedHrPii: ${self:service}-refined-hr-pii-${self:custom.hen}-${self:provider.stage}
    refinedRegular: ${self:service}-refined-regular-${self:custom.hen}-${self:provider.stage}
    delivery: ${self:service}-delivery-${self:custom.hen}-${self:provider.stage}
  remover:
    buckets:
      - ${self:custom.buckets.code}
  package:
    routeRawArtifact: target/dist/${self:service}-route-raw.zip
    extractMetadataArtifact: target/dist/${self:service}-extract-metadata.zip
    addStepsArtifact: target/dist/${self:service}-add-jobflow-steps.zip

provider:
  name: aws
  runtime: python2.7
  stage: ${env:STAGE, self:custom.localDeploy.stage}
  region: us-east-1
  deploymentBucket: motherhen-${self:custom.coop}-${self:custom.hen}-deployments
  stackTags:
    GLCODE: '0062'
    bill-glcode: '0062'
    # TODO: change support team to EIM at some point...
    SupportTeam: eaapplicationarchitects@gamestop.com
    tech-support-team: eaapplicationarchitects@gamestop.com
    BuiltBy: eaapplicationarchitects@gamestop.com
    tech-builtby: eaapplicationarchitects@gamestop.com
    tech-deployby: MH-CodePipeline
    LastUpdatedBy: 'dturner'
  environment:
    STAGE: ${self:provider.stage}
    # uncomment for local test via sls offline, or define the env var manually in your test shell
    # but do not checkin since it will break the TEST stage of your app's code-pipeline
    # AWS_REGION: ${self:provider.region} # needed for sls offline

package:
  individually: true

functions:

################################################
#
# NOTE: Be EXTREMELY careful with naming here--especially the buckets and lambdapermissions.
#       We are relying on some serverless framework magic to do things in the right order, 
#       and not naming things correctly can cause endless frustration and maybe even tears.
#
# See: https://gamestop.atlassian.net/wiki/spaces/AA/pages/81494201/Configure+S3+triggered+lambda+via+SLS
# See also: https://serverless.com/framework/docs/providers/aws/events/s3/
#           * Pay special attention to the bullets under the "Custom bucket configuration" heading.
#
################################################

  routeRaw:
    role: RouteRawRole
    environment:
      RAW_CUSTOMER_PII_BUCKET: ${self:custom.buckets.rawCustomerPii}
      RAW_HR_PII_BUCKET: ${self:custom.buckets.rawHrPii}
      RAW_REGULAR_BUCKET: ${self:custom.buckets.rawRegular}

    name: ${self:service}-route-raw-${self:provider.stage}
    handler: handler.lambda_handler
    events:
      - s3:
        bucket: landing
        event: s3:ObjectCreated:*
    package:
      artifact: ${self:custom.package.routeRawArtifact}

  extractMetadata:
    role: ExtractMetadataRole
    environment:
      RAW_CUSTOMER_PII_BUCKET: ${self:custom.buckets.rawCustomerPii}
      RAW_HR_PII_BUCKET: ${self:custom.buckets.rawHrPii}
      RAW_REGULAR_BUCKET: ${self:custom.buckets.rawRegular}
      DELIVERY_BUCKET: ${self:custom.buckets.delivery}
      FILE_METADATA_TABLE: ${self:custom.dynamo.fileMetadata.name}
    name: ${self:service}-extract-metadata-${self:provider.stage}
    handler: handler.lambda_handler
    events:
      - s3:
        bucket: rawCustomerPii
        event: s3:ObjectCreated:*
      - s3:
        bucket: rawHrPii
        event: s3:ObjectCreated:*
      - s3:
        bucket: rawRegular
        event: s3:ObjectCreated:*
      - s3:
        bucket: delivery
        event: s3:ObjectCreated:*
    package:
      artifact: ${self:custom.package.extractMetadataArtifact}

  addJobFlowStepsStore:
    role: AddJobFlowStepsRole
    environment:
      CODE_BUCKET: ${self:custom.buckets.code}
      RAW_CUSTOMER_PII_BUCKET: ${self:custom.buckets.rawCustomerPii}
      RAW_HR_PII_BUCKET: ${self:custom.buckets.rawHrPii}
      RAW_REGULAR_BUCKET: ${self:custom.buckets.rawRegular}
      DISCOVERY_CUSTOMER_PII_BUCKET: ${self:custom.buckets.discoveryCustomerPii}
      DISCOVERY_HR_PII_BUCKET: ${self:custom.buckets.discoveryHrPii}
      DISCOVERY_REGULAR_BUCKET: ${self:custom.buckets.discoveryRegular}
      REFINED_CUSTOMER_PII_BUCKET: ${self:custom.buckets.refinedCustomerPii}
      REFINED_HR_PII_BUCKET: ${self:custom.buckets.refinedHrPii}
      REFINED_REGULAR_BUCKET: ${self:custom.buckets.refinedRegular}
      DELIVERY_BUCKET: ${self:custom.buckets.delivery}
      EMR_STACK_NAME: ${self:custom.emrStackName}
      PROCESS_METADATA_TABLE: ${self:custom.dynamo.processMetadata.name}
    name: ${self:service}-add-steps-store-${self:provider.stage}
    handler: handler.lambda_handler
    events:
      - schedule:
          name: ${self:service}-add-steps-store-sched-${self:provider.stage}
          description: 'Invokes the ${self:service}-add-steps-store-${self:provider.stage} lambda on a schedule'
          rate: rate(1 hour)
          input:
            builder: store
            enabled: true
    package:
      artifact: ${self:custom.package.addStepsArtifact}
 
  addJobFlowStepsCustomer:
    role: AddJobFlowStepsRole
    environment:
      CODE_BUCKET: ${self:custom.buckets.code}
      RAW_CUSTOMER_PII_BUCKET: ${self:custom.buckets.rawCustomerPii}
      RAW_HR_PII_BUCKET: ${self:custom.buckets.rawHrPii}
      RAW_REGULAR_BUCKET: ${self:custom.buckets.rawRegular}
      DISCOVERY_CUSTOMER_PII_BUCKET: ${self:custom.buckets.discoveryCustomerPii}
      DISCOVERY_HR_PII_BUCKET: ${self:custom.buckets.discoveryHrPii}
      DISCOVERY_REGULAR_BUCKET: ${self:custom.buckets.discoveryRegular}
      REFINED_CUSTOMER_PII_BUCKET: ${self:custom.buckets.refinedCustomerPii}
      REFINED_HR_PII_BUCKET: ${self:custom.buckets.refinedHrPii}
      REFINED_REGULAR_BUCKET: ${self:custom.buckets.refinedRegular}
      DELIVERY_BUCKET: ${self:custom.buckets.delivery}
      EMR_STACK_NAME: ${self:custom.emrStackName}
    name: ${self:service}-add-steps-customer-${self:provider.stage}
    handler: handler.lambda_handler
    events:
      - schedule:
          name: ${self:service}-add-steps-customer-sched-${self:provider.stage}
          description: 'Invokes the ${self:service}-add-steps-customer-${self:provider.stage} lambda on a schedule'
          rate: cron(0 5 * * ? *)
          input:
            builder: customer
          enabled: true
    package:
      artifact: ${self:custom.package.addStepsArtifact}
      
  addJobFlowStepsEmployee:
    role: AddJobFlowStepsRole
    environment:
      CODE_BUCKET: ${self:custom.buckets.code}
      RAW_CUSTOMER_PII_BUCKET: ${self:custom.buckets.rawCustomerPii}
      RAW_HR_PII_BUCKET: ${self:custom.buckets.rawHrPii}
      RAW_REGULAR_BUCKET: ${self:custom.buckets.rawRegular}
      DISCOVERY_CUSTOMER_PII_BUCKET: ${self:custom.buckets.discoveryCustomerPii}
      DISCOVERY_HR_PII_BUCKET: ${self:custom.buckets.discoveryHrPii}
      DISCOVERY_REGULAR_BUCKET: ${self:custom.buckets.discoveryRegular}
      REFINED_CUSTOMER_PII_BUCKET: ${self:custom.buckets.refinedCustomerPii}
      REFINED_HR_PII_BUCKET: ${self:custom.buckets.refinedHrPii}
      REFINED_REGULAR_BUCKET: ${self:custom.buckets.refinedRegular}
      DELIVERY_BUCKET: ${self:custom.buckets.delivery}
      EMR_STACK_NAME: ${self:custom.emrStackName}
      PROCESS_METADATA_TABLE: ${self:custom.dynamo.processMetadata.name}
    name: ${self:service}-add-steps-employee-${self:provider.stage}
    handler: handler.lambda_handler
    events:
      - schedule:
          name: ${self:service}-add-steps-employee-sched-${self:provider.stage}
          description: 'Invokes the ${self:service}-add-steps-employee-${self:provider.stage} lambda on a schedule'
          rate: cron(0/15 * * * ? *) # every 15 minutes, every day, all day
          input:
            builder: employee
            enabled: true
    package:
      artifact: ${self:custom.package.addStepsArtifact}
    
  addJobFlowStepsProduct:
    role: AddJobFlowStepsRole
    environment:
      CODE_BUCKET: ${self:custom.buckets.code}
      RAW_CUSTOMER_PII_BUCKET: ${self:custom.buckets.rawCustomerPii}
      RAW_HR_PII_BUCKET: ${self:custom.buckets.rawHrPii}
      RAW_REGULAR_BUCKET: ${self:custom.buckets.rawRegular}
      DISCOVERY_CUSTOMER_PII_BUCKET: ${self:custom.buckets.discoveryCustomerPii}
      DISCOVERY_HR_PII_BUCKET: ${self:custom.buckets.discoveryHrPii}
      DISCOVERY_REGULAR_BUCKET: ${self:custom.buckets.discoveryRegular}
      REFINED_CUSTOMER_PII_BUCKET: ${self:custom.buckets.refinedCustomerPii}
      REFINED_HR_PII_BUCKET: ${self:custom.buckets.refinedHrPii}
      REFINED_REGULAR_BUCKET: ${self:custom.buckets.refinedRegular}
      DELIVERY_BUCKET: ${self:custom.buckets.delivery}
      EMR_STACK_NAME: ${self:custom.emrStackName}
    name: ${self:service}-add-steps-product-${self:provider.stage}
    handler: handler.lambda_handler
    events:
      - schedule:
          name: ${self:service}-add-steps-product-sched-${self:provider.stage}
          description: 'Invokes the ${self:service}-add-steps-product-${self:provider.stage} lambda on a schedule'
          rate: cron(0 * /8 * * *)
          input:
            builder: product
          enabled: true
    package:
      artifact: ${self:custom.package.addStepsArtifact}  
     

# NOTE: If needed, add additional Lambda Function definitions here
# See https://serverless.com/framework/docs/providers/aws/guide/functions/ for more information

resources:
  # STUFF FOR CUSTOM BUCKET CONFIGURATION
  ### TODO ### https://serverless.com/framework/docs/providers/aws/events/s3/
  Resources:
    ######################################################################
    # SPARK CODE BUCKET
    ######################################################################
    
    # S3 bucket where we put spark code. Not used by lambdas, but read by the EMR cluster
    S3BucketCode:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.buckets.code}
        # need to add policy to allow the cluster to read the bucket

    ######################################################################
    # LANDING BUCKET
    ######################################################################

    # S3 bucket where CSV files enter the data lake
    S3BucketLanding:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.buckets.landing}
        NotificationConfiguration:
          LambdaConfigurations:
            - Event: s3:ObjectCreated:*
              Function:
                Fn::GetAtt:
                  - RouteRawLambdaFunction
                  - Arn
      DependsOn: RouteRawLambdaPermissionLandingS3

    # Permission to invoke the Lambda that routes files from the Landing bucket to the Raw buckets
    RouteRawLambdaPermissionLandingS3:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Fn::GetAtt:
            - RouteRawLambdaFunction
            - Arn
        Principal: s3.amazonaws.com
        Action: lambda:InvokeFunction
        SourceAccount:
          Ref: AWS::AccountId
        SourceArn: arn:aws:s3:::${self:custom.buckets.landing}

    ######################################################################
    # RAW BUCKETS
    ######################################################################

    # RAW CUSTOMER PII BUCKET
    # S3 bucket that contains raw (csv) files containing Customer PII data
    S3BucketRawCustomerPii:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.buckets.rawCustomerPii}
        LifecycleConfiguration:
          Rules:
            - Id: Glacier-Expiration-Rule
              Status: Enabled
              ExpirationInDays: 3650
              Transitions:
                - TransitionInDays: 730
                  StorageClass: Glacier
        NotificationConfiguration:
          LambdaConfigurations:
            - Event: s3:ObjectCreated:*
              Function:
                Fn::GetAtt:
                  - ExtractMetadataLambdaFunction
                  - Arn
      DependsOn: ExtractMetadataLambdaPermissionRawCustomerPiiS3

    # Permission to invoke the Lambda that extracts metadata from the raw customer pii bucket
    ExtractMetadataLambdaPermissionRawCustomerPiiS3:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Fn::GetAtt:
            - ExtractMetadataLambdaFunction
            - Arn
        Principal: s3.amazonaws.com
        Action: lambda:InvokeFunction
        SourceAccount:
          Ref: AWS::AccountId
        SourceArn: arn:aws:s3:::${self:custom.buckets.rawCustomerPii}

    # RAW HR PII BUCKET
    # S3 bucket that contains raw (csv) files containing HR PII data
    S3BucketRawHrPii:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.buckets.rawHrPii}
        LifecycleConfiguration:
          Rules:
            - Id: Glacier-Expiration-Rule
              Status: Enabled
              ExpirationInDays: 3650
              Transitions:
                - TransitionInDays: 730
                  StorageClass: Glacier
        NotificationConfiguration:
          LambdaConfigurations:
            - Event: s3:ObjectCreated:*
              Function:
                Fn::GetAtt:
                  - ExtractMetadataLambdaFunction
                  - Arn
      DependsOn: ExtractMetadataLambdaPermissionRawHrPiiS3

    # Permission to invoke the Lambda that extracts metadata from the raw hr bucket
    ExtractMetadataLambdaPermissionRawHrPiiS3:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Fn::GetAtt:
            - ExtractMetadataLambdaFunction
            - Arn
        Principal: s3.amazonaws.com
        Action: lambda:InvokeFunction
        SourceAccount:
          Ref: AWS::AccountId
        SourceArn: arn:aws:s3:::${self:custom.buckets.rawHrPii}

    # RAW REGULAR BUCKET
    # S3 bucket that contains raw (csv) files containing no security-related data
    S3BucketRawRegular:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.buckets.rawRegular}
        LifecycleConfiguration:
          Rules:
            - Id: Glacier-Expiration-Rule
              Status: Enabled
              ExpirationInDays: 3650
              Transitions:
                - TransitionInDays: 730
                  StorageClass: Glacier
        NotificationConfiguration:
          LambdaConfigurations:
            - Event: s3:ObjectCreated:*
              Function:
                Fn::GetAtt:
                  - ExtractMetadataLambdaFunction
                  - Arn
      DependsOn: ExtractMetadataLambdaPermissionRawRegularS3

    # Permission to invoke the Lambda that extracts metadata from the raw regular bucket
    ExtractMetadataLambdaPermissionRawRegularS3:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Fn::GetAtt:
            - ExtractMetadataLambdaFunction
            - Arn
        Principal: s3.amazonaws.com
        Action: lambda:InvokeFunction
        SourceAccount:
          Ref: AWS::AccountId
        SourceArn: arn:aws:s3:::${self:custom.buckets.rawRegular}

    ######################################################################
    # DELIVERY BUCKET
    ######################################################################

    # S3 bucket that contains the output of the datalake processing (csv)
    S3BucketDelivery:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.buckets.delivery}
        LifecycleConfiguration:
          Rules:
          - Id: ExpirationRule
            Status: Enabled
            ExpirationInDays: 14
        NotificationConfiguration:
          LambdaConfigurations:
            - Event: s3:ObjectCreated:*
              Function:
                Fn::GetAtt:
                  - ExtractMetadataLambdaFunction
                  - Arn
      DependsOn: ExtractMetadataLambdaPermissionDeliveryS3

    # Permissions for the Lambda that extracts metadata from the raw and delivery buckets
    ExtractMetadataLambdaPermissionDeliveryS3:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Fn::GetAtt:
            - ExtractMetadataLambdaFunction
            - Arn
        Principal: s3.amazonaws.com
        Action: lambda:InvokeFunction
        SourceAccount:
          Ref: AWS::AccountId
        SourceArn: arn:aws:s3:::${self:custom.buckets.delivery}

    ######################################################################
    # DISCOVERY BUCKETS
    ######################################################################

    # DISCOVERY CUSTOMER PII BUCKET
    S3BucketDiscoveryCustomerPii:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.buckets.discoveryCustomerPii}
        LifecycleConfiguration:
          Rules:
            - Id: IA-Glacier-Expire-Rule
              Status: Enabled
              ExpirationInDays: 3650
              Transitions:
                - TransitionInDays: 730
                  StorageClass: STANDARD_IA
                - TransitionInDays: 1460
                  StorageClass: Glacier

    # DISCOVERY HR PII BUCKET
    S3BucketDiscoveryHrPii:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.buckets.discoveryHrPii}
        LifecycleConfiguration:
          Rules:
            - Id: IA-Glacier-Expire-Rule
              Status: Enabled
              ExpirationInDays: 3650
              Transitions:
                - TransitionInDays: 730
                  StorageClass: STANDARD_IA
                - TransitionInDays: 1460
                  StorageClass: Glacier

    # DISCOVERY REGULAR BUCKET
    S3BucketDiscoveryRegular:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.buckets.discoveryRegular}
        LifecycleConfiguration:
          Rules:
          - Id: IA-Glacier-Expire-Rule
            Status: Enabled
            ExpirationInDays: 3650
            Transitions:
              - TransitionInDays: 730
                StorageClass: STANDARD_IA
              - TransitionInDays: 1460
                StorageClass: Glacier

    ######################################################################
    # REFINED BUCKETS
    ######################################################################

    # REFINED CUSTOMER PII BUCKET
    S3BucketRefinedCustomerPii:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.buckets.refinedCustomerPii}
        LifecycleConfiguration:
          Rules:
          - Id: IA-Glacier-Expire-Rule
            Status: Enabled
            ExpirationInDays: 3650
            Transitions:
              - TransitionInDays: 730
                StorageClass: STANDARD_IA
              - TransitionInDays: 1460
                StorageClass: Glacier

    # REFINED HR PII BUCKET
    S3BucketRefinedHrPii:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.buckets.refinedHrPii}
        LifecycleConfiguration:
          Rules:
          - Id: IA-Glacier-Expire-Rule
            Status: Enabled
            ExpirationInDays: 3650
            Transitions:
              - TransitionInDays: 730
                StorageClass: STANDARD_IA
              - TransitionInDays: 1460
                StorageClass: Glacier

    # REFINED REGULAR BUCKET
    S3BucketRefinedRegular:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.buckets.refinedRegular}
        LifecycleConfiguration:
          Rules:
          - Id: IA-Glacier-Expire-Rule
            Status: Enabled
            ExpirationInDays: 3650
            Transitions:
              - TransitionInDays: 730
                StorageClass: STANDARD_IA
              - TransitionInDays: 1460
                StorageClass: Glacier

    ######################################################################
    # DYNAMO TABLES
    ######################################################################

    FileMetadataDynamoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.dynamo.fileMetadata.readCapacity}
          WriteCapacityUnits: ${self:custom.dynamo.fileMetadata.writeCapacity}
        # NOTE: Must grant access to this TableName in iamRoleStatements section
        TableName: ${self:custom.dynamo.fileMetadata.name}

    ProcessMetadataDynamoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.dynamo.processMetadata.readCapacity}
          WriteCapacityUnits: ${self:custom.dynamo.processMetadata.writeCapacity}
        # NOTE: Must grant access to this TableName in iamRoleStatements section
        TableName: ${self:custom.dynamo.processMetadata.name}

    ######################################################################
    # IAM ROLES
    ######################################################################

    LogPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: ${self:service}-log-policy-${self:provider.stage}
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:DescribeLogStreams
              Resource: arn:aws:logs:${self:provider.region}:*:*
        Roles:
          - Ref: RouteRawRole
          - Ref: ExtractMetadataRole
          - Ref: AddJobFlowStepsRole

    RouteRawRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-routeRawRole-${self:provider.stage}
        AssumeRolePolicyDocument: 
          ${file(sls-include/assume-role-policy-doc.yml)}
        Policies:
          - PolicyName: RouteRawPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - s3:GetObject
                  Resource:
                    - arn:aws:s3:::${self:custom.buckets.landing}/*
                - Effect: Allow
                  Action:
                    - s3:PutObject
                  Resource:
                    - arn:aws:s3:::${self:custom.buckets.rawCustomerPii}/*
                    - arn:aws:s3:::${self:custom.buckets.rawHrPii}/*
                    - arn:aws:s3:::${self:custom.buckets.rawRegular}/*

    ExtractMetadataRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-extractMetadataRole-${self:provider.stage}
        AssumeRolePolicyDocument:
          ${file(sls-include/assume-role-policy-doc.yml)}
        Policies:
          - PolicyName: ExtractMetadataPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - s3:GetObject
                  Resource:
                    - arn:aws:s3:::${self:custom.buckets.rawCustomerPii}/*
                    - arn:aws:s3:::${self:custom.buckets.rawHrPii}/*
                    - arn:aws:s3:::${self:custom.buckets.rawRegular}/*
                    - arn:aws:s3:::${self:custom.buckets.delivery}/*
                - Effect: Allow
                  Action:
                    - dynamodb:*
                  Resource:
                    - Fn::GetAtt:
                      - FileMetadataDynamoTable
                      - Arn

    # This role will be used by all AddJobFlowSteps lambdas
    AddJobFlowStepsRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-AddJobFlowStepsRole-${self:provider.stage}
        AssumeRolePolicyDocument:
          ${file(sls-include/assume-role-policy-doc.yml)}
        Policies:
          - PolicyName: AddJobFlowStepsRolePolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - cloudformation:DescribeStacks
                  Resource:
                    - Fn::Join:
                      - ':'
                      - - arn
                        - aws
                        - cloudformation
                        - Ref: AWS::Region
                        - Ref: AWS::AccountId
                        - stack/${self:custom.emrStackName}/*
                - Effect: Allow
                  Action:
                    - s3:*
                  Resource:
                    - arn:aws:s3:::${self:custom.buckets.rawCustomerPii}
                    - arn:aws:s3:::${self:custom.buckets.rawCustomerPii}/*
                    - arn:aws:s3:::${self:custom.buckets.rawHrPii}
                    - arn:aws:s3:::${self:custom.buckets.rawHrPii}/*
                    - arn:aws:s3:::${self:custom.buckets.rawRegular}
                    - arn:aws:s3:::${self:custom.buckets.rawRegular}/*
                - Effect: Allow
                  Action:
                    - dynamodb:*
                  Resource:
                    - Fn::GetAtt:
                      - FileMetadataDynamoTable
                      - Arn
                - Effect: Allow
                  Action:
                    - elasticmapreduce:AddJobFlowSteps
                  Resource: '*'

    # This role will be used to query CustomerPii and HrPii and regular buckets via Athena
    AthenaaccessCustomerPiibucketsRole:
      Type: AWS::IAM::Role
      Properties:
         RoleName: ${self:service}-AthenaaccessCustomerPiibucketsRole-${self:provider.stage}
         AssumeRolePolicyDocument:
           ${file(sls-include/assume-athena-role-policy-doc.yml)}
         Policies:
           - PolicyName: AthenaaccessPiibucketsPolicy
             PolicyDocument:
               Version: '2012-10-17'
               Statement:
                - Effect: Allow
                  Action:
                    - athena:*
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - s3:ListBucket
                    - s3:ListObjects
                    - s3:GetObject
                  Resource:
                      - arn:aws:s3:::${self:custom.buckets.rawCustomerPii}/*
                      - arn:aws:s3:::${self:custom.buckets.discoveryCustomerPii}/*
                      - arn:aws:s3:::${self:custom.buckets.refinedCustomerPii}/*

    AthenaaccessHrPiibucketsRole:
      Type: AWS::IAM::Role
      Properties:
         RoleName: ${self:service}-AthenaaccessHrPiibucketsRole-${self:provider.stage}
         AssumeRolePolicyDocument:
           ${file(sls-include/assume-athena-role-policy-doc.yml)}
         Policies:
           - PolicyName: AthenaaccessHrbucketsPolicy
             PolicyDocument:
               Version: '2012-10-17'
               Statement:
                - Effect: Allow
                  Action:
                    - athena:*
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - s3:ListBucket
                    - s3:ListObjects
                    - s3:GetObject
                  Resource:
                      - arn:aws:s3:::${self:custom.buckets.rawHrPii}/*
                      - arn:aws:s3:::${self:custom.buckets.discoveryHrPii}/*
                      - arn:aws:s3:::${self:custom.buckets.refinedHrPii}/*

    AthenaaccessRegularbucketsRole:
      Type: AWS::IAM::Role
      Properties:
         RoleName: ${self:service}-AthenaaccessRegularbucketsRole-${self:provider.stage}
         AssumeRolePolicyDocument:
           ${file(sls-include/assume-athena-role-policy-doc.yml)}
         Policies:
           - PolicyName: AthenaaccessRegularbucketsPolicy
             PolicyDocument:
               Version: '2012-10-17'
               Statement:
                - Effect: Allow
                  Action:
                    - athena:*
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - s3:ListBucket
                    - s3:ListObjects
                    - s3:GetObject
                  Resource:
                      - arn:aws:s3:::${self:custom.buckets.rawRegular}/*
                      - arn:aws:s3:::${self:custom.buckets.discoveryRegular}/*
                      - arn:aws:s3:::${self:custom.buckets.refinedRegular}/*
  ######################################################################
  # OUTPUTS
  ######################################################################

  Outputs:
    CodeBucket:
      Description: Bucket where the spark code is deployed--the location where EMR steps get their code
      Value:
        Ref: S3BucketCode
